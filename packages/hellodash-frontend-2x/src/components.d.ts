/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RouterHistory } from "@stencil/router";
import { Auth0Client } from "@auth0/auth0-spa-js";
import { Color, Scale, Status } from "@didyoumeantoast/dash-components/dist/types/types/types";
import { LabelViewModel } from "./view-models/label-view-model";
import { NotePreviewViewModel } from "./view-models/note-preview-view-model";
import { NoteCardMode } from "./components/common/dash-note-card/dash-note-card";
import { UserViewModel } from "./view-models/user-view-model";
export namespace Components {
    interface DashApp {
        "history": RouterHistory;
    }
    interface DashAuth0Provider {
        "authClient": Auth0Client;
    }
    interface DashConfirm {
        "cancelText": string;
        "close": () => Promise<void>;
        "confirmButtonStatus": Status;
        "confirmText": string;
        "heading": string;
    }
    interface DashConfirmButton {
        "icon": string;
        "scale": Scale;
    }
    interface DashEditLabels {
        "close": () => Promise<void>;
    }
    interface DashLabelColorPicker {
        "color": Color;
    }
    interface DashLabelEdit {
        "label": LabelViewModel;
    }
    interface DashLabelSelect {
        "autoFocus": boolean;
        "labels": LabelViewModel[];
    }
    interface DashModalNote {
        "close": () => Promise<void>;
        "newLabelId"?: number;
        "newNote": boolean;
        "noteId": number;
    }
    interface DashNavBar {
        "setFocus": () => Promise<void>;
    }
    interface DashNoteCard {
        "history": RouterHistory;
        "mode": NoteCardMode;
        "notePreview": NotePreviewViewModel;
        "selected": boolean;
    }
    interface DashNoteEditDropdown {
        "notePreview": NotePreviewViewModel;
    }
    interface DashProfileSettings {
        "user": UserViewModel;
    }
    interface DashRoot {
        "history": RouterHistory;
    }
    interface DashRouteBin {
    }
    interface DashRouteNotes {
        "history": RouterHistory;
        "match": any;
    }
    interface DashTextEditor {
        "content": string;
        "debounce": number;
        "deferLoadTime"?: number;
        "getContent": () => Promise<string>;
        "getTextContent": () => Promise<string>;
        "heading": string;
        "isEditorDirty": () => Promise<boolean>;
        "loading"?: boolean;
        "readonly": boolean;
        "resize"?: boolean;
        "save": (emitEvent?: boolean) => Promise<void>;
        "selectTitle": () => Promise<void>;
        "setFocus": () => Promise<void>;
        "showFullscreen"?: boolean;
        "showTitleInput"?: boolean;
    }
}
export interface DashConfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashConfirmElement;
}
export interface DashConfirmButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashConfirmButtonElement;
}
export interface DashEditLabelsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashEditLabelsElement;
}
export interface DashLabelColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashLabelColorPickerElement;
}
export interface DashLabelEditCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashLabelEditElement;
}
export interface DashLabelSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashLabelSelectElement;
}
export interface DashModalNoteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashModalNoteElement;
}
export interface DashNavBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashNavBarElement;
}
export interface DashNoteEditDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashNoteEditDropdownElement;
}
export interface DashTextEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashTextEditorElement;
}
declare global {
    interface HTMLDashAppElement extends Components.DashApp, HTMLStencilElement {
    }
    var HTMLDashAppElement: {
        prototype: HTMLDashAppElement;
        new (): HTMLDashAppElement;
    };
    interface HTMLDashAuth0ProviderElement extends Components.DashAuth0Provider, HTMLStencilElement {
    }
    var HTMLDashAuth0ProviderElement: {
        prototype: HTMLDashAuth0ProviderElement;
        new (): HTMLDashAuth0ProviderElement;
    };
    interface HTMLDashConfirmElement extends Components.DashConfirm, HTMLStencilElement {
    }
    var HTMLDashConfirmElement: {
        prototype: HTMLDashConfirmElement;
        new (): HTMLDashConfirmElement;
    };
    interface HTMLDashConfirmButtonElement extends Components.DashConfirmButton, HTMLStencilElement {
    }
    var HTMLDashConfirmButtonElement: {
        prototype: HTMLDashConfirmButtonElement;
        new (): HTMLDashConfirmButtonElement;
    };
    interface HTMLDashEditLabelsElement extends Components.DashEditLabels, HTMLStencilElement {
    }
    var HTMLDashEditLabelsElement: {
        prototype: HTMLDashEditLabelsElement;
        new (): HTMLDashEditLabelsElement;
    };
    interface HTMLDashLabelColorPickerElement extends Components.DashLabelColorPicker, HTMLStencilElement {
    }
    var HTMLDashLabelColorPickerElement: {
        prototype: HTMLDashLabelColorPickerElement;
        new (): HTMLDashLabelColorPickerElement;
    };
    interface HTMLDashLabelEditElement extends Components.DashLabelEdit, HTMLStencilElement {
    }
    var HTMLDashLabelEditElement: {
        prototype: HTMLDashLabelEditElement;
        new (): HTMLDashLabelEditElement;
    };
    interface HTMLDashLabelSelectElement extends Components.DashLabelSelect, HTMLStencilElement {
    }
    var HTMLDashLabelSelectElement: {
        prototype: HTMLDashLabelSelectElement;
        new (): HTMLDashLabelSelectElement;
    };
    interface HTMLDashModalNoteElement extends Components.DashModalNote, HTMLStencilElement {
    }
    var HTMLDashModalNoteElement: {
        prototype: HTMLDashModalNoteElement;
        new (): HTMLDashModalNoteElement;
    };
    interface HTMLDashNavBarElement extends Components.DashNavBar, HTMLStencilElement {
    }
    var HTMLDashNavBarElement: {
        prototype: HTMLDashNavBarElement;
        new (): HTMLDashNavBarElement;
    };
    interface HTMLDashNoteCardElement extends Components.DashNoteCard, HTMLStencilElement {
    }
    var HTMLDashNoteCardElement: {
        prototype: HTMLDashNoteCardElement;
        new (): HTMLDashNoteCardElement;
    };
    interface HTMLDashNoteEditDropdownElement extends Components.DashNoteEditDropdown, HTMLStencilElement {
    }
    var HTMLDashNoteEditDropdownElement: {
        prototype: HTMLDashNoteEditDropdownElement;
        new (): HTMLDashNoteEditDropdownElement;
    };
    interface HTMLDashProfileSettingsElement extends Components.DashProfileSettings, HTMLStencilElement {
    }
    var HTMLDashProfileSettingsElement: {
        prototype: HTMLDashProfileSettingsElement;
        new (): HTMLDashProfileSettingsElement;
    };
    interface HTMLDashRootElement extends Components.DashRoot, HTMLStencilElement {
    }
    var HTMLDashRootElement: {
        prototype: HTMLDashRootElement;
        new (): HTMLDashRootElement;
    };
    interface HTMLDashRouteBinElement extends Components.DashRouteBin, HTMLStencilElement {
    }
    var HTMLDashRouteBinElement: {
        prototype: HTMLDashRouteBinElement;
        new (): HTMLDashRouteBinElement;
    };
    interface HTMLDashRouteNotesElement extends Components.DashRouteNotes, HTMLStencilElement {
    }
    var HTMLDashRouteNotesElement: {
        prototype: HTMLDashRouteNotesElement;
        new (): HTMLDashRouteNotesElement;
    };
    interface HTMLDashTextEditorElement extends Components.DashTextEditor, HTMLStencilElement {
    }
    var HTMLDashTextEditorElement: {
        prototype: HTMLDashTextEditorElement;
        new (): HTMLDashTextEditorElement;
    };
    interface HTMLElementTagNameMap {
        "dash-app": HTMLDashAppElement;
        "dash-auth0-provider": HTMLDashAuth0ProviderElement;
        "dash-confirm": HTMLDashConfirmElement;
        "dash-confirm-button": HTMLDashConfirmButtonElement;
        "dash-edit-labels": HTMLDashEditLabelsElement;
        "dash-label-color-picker": HTMLDashLabelColorPickerElement;
        "dash-label-edit": HTMLDashLabelEditElement;
        "dash-label-select": HTMLDashLabelSelectElement;
        "dash-modal-note": HTMLDashModalNoteElement;
        "dash-nav-bar": HTMLDashNavBarElement;
        "dash-note-card": HTMLDashNoteCardElement;
        "dash-note-edit-dropdown": HTMLDashNoteEditDropdownElement;
        "dash-profile-settings": HTMLDashProfileSettingsElement;
        "dash-root": HTMLDashRootElement;
        "dash-route-bin": HTMLDashRouteBinElement;
        "dash-route-notes": HTMLDashRouteNotesElement;
        "dash-text-editor": HTMLDashTextEditorElement;
    }
}
declare namespace LocalJSX {
    interface DashApp {
        "history"?: RouterHistory;
    }
    interface DashAuth0Provider {
        "authClient"?: Auth0Client;
    }
    interface DashConfirm {
        "cancelText"?: string;
        "confirmButtonStatus"?: Status;
        "confirmText"?: string;
        "heading"?: string;
        "onDashConfirmConfirmed"?: (event: DashConfirmCustomEvent<any>) => void;
        "onDashModalBeforeClose"?: (event: DashConfirmCustomEvent<any>) => void;
        "onDashModalClosed"?: (event: DashConfirmCustomEvent<any>) => void;
    }
    interface DashConfirmButton {
        "icon"?: string;
        "onDashConfirmButtonConfirmed"?: (event: DashConfirmButtonCustomEvent<any>) => void;
        "scale"?: Scale;
    }
    interface DashEditLabels {
        "onDashModalBeforeClose"?: (event: DashEditLabelsCustomEvent<any>) => void;
        "onDashModalClosed"?: (event: DashEditLabelsCustomEvent<any>) => void;
    }
    interface DashLabelColorPicker {
        "color"?: Color;
        "onDashLabelColorPickerColorChanged"?: (event: DashLabelColorPickerCustomEvent<Color>) => void;
    }
    interface DashLabelEdit {
        "label"?: LabelViewModel;
        "onDashDeleteLabel"?: (event: DashLabelEditCustomEvent<LabelViewModel>) => void;
    }
    interface DashLabelSelect {
        "autoFocus"?: boolean;
        "labels"?: LabelViewModel[];
        "onDashLabelSelectLabelAdded"?: (event: DashLabelSelectCustomEvent<LabelViewModel>) => void;
        "onDashLabelSelectLabelRemoved"?: (event: DashLabelSelectCustomEvent<LabelViewModel>) => void;
    }
    interface DashModalNote {
        "newLabelId"?: number;
        "newNote"?: boolean;
        "noteId"?: number;
        "onDashModalBeforeClose"?: (event: DashModalNoteCustomEvent<any>) => void;
        "onDashModalClosed"?: (event: DashModalNoteCustomEvent<any>) => void;
    }
    interface DashNavBar {
        "onDashMenuToggled"?: (event: DashNavBarCustomEvent<any>) => void;
    }
    interface DashNoteCard {
        "history"?: RouterHistory;
        "mode"?: NoteCardMode;
        "notePreview"?: NotePreviewViewModel;
        "selected"?: boolean;
    }
    interface DashNoteEditDropdown {
        "notePreview"?: NotePreviewViewModel;
        "onDashNoteEditDropdownVisibleChanged"?: (event: DashNoteEditDropdownCustomEvent<boolean>) => void;
    }
    interface DashProfileSettings {
        "user"?: UserViewModel;
    }
    interface DashRoot {
        "history"?: RouterHistory;
    }
    interface DashRouteBin {
    }
    interface DashRouteNotes {
        "history"?: RouterHistory;
        "match"?: any;
    }
    interface DashTextEditor {
        "content"?: string;
        "debounce"?: number;
        "deferLoadTime"?: number;
        "heading"?: string;
        "loading"?: boolean;
        "onDashTextEditorContentChanged"?: (event: DashTextEditorCustomEvent<string>) => void;
        "onDashTextEditorFullscreenChanged"?: (event: DashTextEditorCustomEvent<boolean>) => void;
        "onDashTextEditorHeadingChanged"?: (event: DashTextEditorCustomEvent<string>) => void;
        "onDashTextEditorInit"?: (event: DashTextEditorCustomEvent<HTMLDashTextEditorElement>) => void;
        "onDashTextEditorIsDirty"?: (event: DashTextEditorCustomEvent<any>) => void;
        "onDashTextEditorNodeChanged"?: (event: DashTextEditorCustomEvent<object>) => void;
        "readonly"?: boolean;
        "resize"?: boolean;
        "showFullscreen"?: boolean;
        "showTitleInput"?: boolean;
    }
    interface IntrinsicElements {
        "dash-app": DashApp;
        "dash-auth0-provider": DashAuth0Provider;
        "dash-confirm": DashConfirm;
        "dash-confirm-button": DashConfirmButton;
        "dash-edit-labels": DashEditLabels;
        "dash-label-color-picker": DashLabelColorPicker;
        "dash-label-edit": DashLabelEdit;
        "dash-label-select": DashLabelSelect;
        "dash-modal-note": DashModalNote;
        "dash-nav-bar": DashNavBar;
        "dash-note-card": DashNoteCard;
        "dash-note-edit-dropdown": DashNoteEditDropdown;
        "dash-profile-settings": DashProfileSettings;
        "dash-root": DashRoot;
        "dash-route-bin": DashRouteBin;
        "dash-route-notes": DashRouteNotes;
        "dash-text-editor": DashTextEditor;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dash-app": LocalJSX.DashApp & JSXBase.HTMLAttributes<HTMLDashAppElement>;
            "dash-auth0-provider": LocalJSX.DashAuth0Provider & JSXBase.HTMLAttributes<HTMLDashAuth0ProviderElement>;
            "dash-confirm": LocalJSX.DashConfirm & JSXBase.HTMLAttributes<HTMLDashConfirmElement>;
            "dash-confirm-button": LocalJSX.DashConfirmButton & JSXBase.HTMLAttributes<HTMLDashConfirmButtonElement>;
            "dash-edit-labels": LocalJSX.DashEditLabels & JSXBase.HTMLAttributes<HTMLDashEditLabelsElement>;
            "dash-label-color-picker": LocalJSX.DashLabelColorPicker & JSXBase.HTMLAttributes<HTMLDashLabelColorPickerElement>;
            "dash-label-edit": LocalJSX.DashLabelEdit & JSXBase.HTMLAttributes<HTMLDashLabelEditElement>;
            "dash-label-select": LocalJSX.DashLabelSelect & JSXBase.HTMLAttributes<HTMLDashLabelSelectElement>;
            "dash-modal-note": LocalJSX.DashModalNote & JSXBase.HTMLAttributes<HTMLDashModalNoteElement>;
            "dash-nav-bar": LocalJSX.DashNavBar & JSXBase.HTMLAttributes<HTMLDashNavBarElement>;
            "dash-note-card": LocalJSX.DashNoteCard & JSXBase.HTMLAttributes<HTMLDashNoteCardElement>;
            "dash-note-edit-dropdown": LocalJSX.DashNoteEditDropdown & JSXBase.HTMLAttributes<HTMLDashNoteEditDropdownElement>;
            "dash-profile-settings": LocalJSX.DashProfileSettings & JSXBase.HTMLAttributes<HTMLDashProfileSettingsElement>;
            "dash-root": LocalJSX.DashRoot & JSXBase.HTMLAttributes<HTMLDashRootElement>;
            "dash-route-bin": LocalJSX.DashRouteBin & JSXBase.HTMLAttributes<HTMLDashRouteBinElement>;
            "dash-route-notes": LocalJSX.DashRouteNotes & JSXBase.HTMLAttributes<HTMLDashRouteNotesElement>;
            "dash-text-editor": LocalJSX.DashTextEditor & JSXBase.HTMLAttributes<HTMLDashTextEditorElement>;
        }
    }
}
