/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Appearance, Scale, ScaleExtended, Status, Theme } from "./types";
import { Placement, PlacementStrategy } from "./components/dash-popover/dash-popover";
import { IconColor } from "./components/dash-icon/dash-icon";
import { LabelLayout } from "./components/dash-label/dash-label";
import { SelectionMode } from "./components/dash-list/dash-list";
import { SelectionMode as SelectionMode1 } from "./components/dash-list/dash-list";
import { Placement as Placement1, PlacementStrategy as PlacementStrategy1, PopoverCloseEvent } from "./components/dash-popover/dash-popover";
import { Resize } from "./components/dash-textarea/dash-textarea";
export { Appearance, Scale, ScaleExtended, Status, Theme } from "./types";
export { Placement, PlacementStrategy } from "./components/dash-popover/dash-popover";
export { IconColor } from "./components/dash-icon/dash-icon";
export { LabelLayout } from "./components/dash-label/dash-label";
export { SelectionMode } from "./components/dash-list/dash-list";
export { SelectionMode as SelectionMode1 } from "./components/dash-list/dash-list";
export { Placement as Placement1, PlacementStrategy as PlacementStrategy1, PopoverCloseEvent } from "./components/dash-popover/dash-popover";
export { Resize } from "./components/dash-textarea/dash-textarea";
export namespace Components {
    interface DashButton {
        /**
          * Visible appearance of the button
          * @default 'clear'
         */
        "appearance": Appearance;
        /**
          * When `true`, disables interaction
          * @default false
         */
        "disabled": boolean;
        /**
          * Size of button
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
        /**
          * Icon displayed at the start of the button
          * @optional
         */
        "startIcon"?: string;
        /**
          * Status of the button shown with various styles
          * @optional
         */
        "status"?: Status;
    }
    interface DashChip {
        /**
          * Background color of the chip
          * @required
         */
        "color": string;
        /**
          * Text to display when user focuses or hovers over dismiss button
          * @optional
         */
        "dismissTooltipText"?: string;
        /**
          * When `true`, chip can be removed
          * @default false
         */
        "dismissible": boolean;
        /**
          * Displayed heading on the chip
          * @required
         */
        "heading": string;
        /**
          * When `true`, the chip can be interacted with
          * @default false
         */
        "selectable": boolean;
    }
    interface DashColorHuePicker {
        /**
          * Hue value from [0, 360]
          * @default 0
         */
        "hue": number;
        /**
          * Width of hue picker (in pixels)
          * @default 200
         */
        "width": number;
    }
    interface DashColorPicker {
        /**
          * Color as hex value
         */
        "color": string;
        /**
          * Default colors
         */
        "defaultColors": string[];
    }
    interface DashColorSwatch {
        /**
          * Color of the swatch
          * @required
         */
        "color": string;
        /**
          * Size of swatch
          * @default 'm'
         */
        "scale": Scale;
        /**
          * When `true`, the swatch is selected and provides visual feedback
          * @default false
         */
        "selected": boolean;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
    }
    interface DashConfirmButton {
        /**
          * Icon used in button that triggers confirm state
          * @required
         */
        "icon": string;
        /**
          * Size of the confirm button
         */
        "scale": Scale;
    }
    interface DashDrillMenu {
        /**
          * When `true`, drill menu is activated
          * @default false
         */
        "active": boolean;
        /**
          * Heading for the drill menu
          * @optional
         */
        "drillHeading": string;
    }
    interface DashDropdown {
        /**
          * When `true`, dropdown will close when focus is lost
          * @default false
         */
        "autoClose": boolean;
        /**
          * Close the dropdown
          * @param focusTarget - target to focus once dropdown is closed
         */
        "close": (focusTarget?: boolean) => Promise<void>;
        /**
          * When `true`, dropdown is open
          * @default false
         */
        "open": boolean;
        /**
          * Placement of the dropdown relative to its target
          * @default 'bottom'
         */
        "placement": Placement;
        /**
          * Placement strategy for dropdown
          * @default 'absolute'
         */
        "placementStrategy": PlacementStrategy;
    }
    interface DashFab {
        /**
          * Icon to display
          * @required
         */
        "icon": string;
        /**
          * Size of the fab
          * @default 'm'
         */
        "scale": ScaleExtended;
    }
    interface DashFilter {
        /**
          * Clears filter value
         */
        "clear": () => Promise<void>;
        /**
          * Debounces input in milliseconds
          * @default 250
         */
        "debounce": number;
        /**
          * Value to filter items by
          * @optional
         */
        "filterValue"?: string;
        /**
          * Items to filter
          * @required
         */
        "items": {}[] | string[];
        /**
          * Key to filter items by. Supports up two two levels of nesting. For example, 'state.title' is valid
          * @optional
         */
        "objKey": string;
        /**
          * Placeholder text for input
          * @default 'Filter''
         */
        "placeholder"?: string;
        /**
          * Size of the filter input
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Selects text in filter input
         */
        "select": () => Promise<void>;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
    }
    interface DashFocusTrap {
    }
    interface DashGrid {
        /**
          * Number of columns when the screen size is large
          * @required
         */
        "colL": number;
        /**
          * Number of columns when the screen size is medium
          * @required
         */
        "colM": number;
        /**
          * Number of columns when the screen size is small
          * @required
         */
        "colS": number;
        /**
          * Number of columns when the screen size is extra large
          * @required
         */
        "colXl": number;
    }
    interface DashIcon {
        /**
          * Color of the icon
          * @default 'neutral'
         */
        "color": IconColor;
        /**
          * Icon name to display
          * @optional
         */
        "icon": string;
        /**
          * URL pointing to icon
          * @optional
         */
        "iconUrl": string;
        /**
          * When `true`, icon is rounded
          * @default false
         */
        "rounded": boolean;
        /**
          * Size of the icon
          * @default 'm'
         */
        "scale"?: ScaleExtended;
        /**
          * Width of the icon in pixels
          * @optional
         */
        "width"?: number;
    }
    interface DashIconButton {
        /**
          * When `true`, the icon button cannot be interacted with
          * @default false
         */
        "disabled": boolean;
        /**
          * Icon to display
          * @optional
         */
        "icon": string;
        /**
          * Icon to display from URL
          * @optional
         */
        "iconUrl": string;
        /**
          * When `true`, indicates the button is loading and cannot be interacted with
          * @default false
         */
        "loading": boolean;
        /**
          * When `true`, the icon button will be round
          * @default false
         */
        "rounded": boolean;
        /**
          * Size of the icon button
          * @default 'm'
         */
        "scale": ScaleExtended;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
        /**
          * Indicates where the tooltip should be placed relative to the icon button
          * @optional
         */
        "tooltipPlacement"?: Placement;
        /**
          * When provided, a tooltip will display when interacted with
          * @optional
         */
        "tooltipText"?: string;
        /**
          * HTML button type https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type
          * @optional
         */
        "type"?: string;
    }
    interface DashInlineEdit {
        /**
          * When `true`, disabled interaction
          * @default false
         */
        "disabled": boolean;
        /**
          * Size of the inline edit
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Value to be used for editing
          * @required
         */
        "value": string;
    }
    interface DashInput {
        /**
          * When `true`, a clear button will be displayed at the end of the input
          * @default false
         */
        "clearable": boolean;
        /**
          * Debounces input changes in milliseconds Note: debounce is only initialized on component load. Modifying debounce after initialization will not do anything.
          * @optional
         */
        "debounce"?: number;
        /**
          * Icon displayed at the end of the input
          * @optional
         */
        "icon"?: string;
        /**
          * Placeholder text for input
          * @optional
         */
        "placeholder"?: string;
        /**
          * Size of the input
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Selects text in input
         */
        "select": () => Promise<void>;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
        /**
          * Input type
          * @optional
         */
        "type": string;
        /**
          * Value of input
          * @optional
         */
        "value"?: string;
    }
    interface DashLabel {
        /**
          * Label for id https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for
          * @optional
         */
        "for": string;
        /**
          * Determines how the label and content is laid out
          * @default 'default'
         */
        "layout": LabelLayout;
    }
    interface DashList {
        /**
          * Whether the list items can be deselected
          * @default false
         */
        "disableDeselect": boolean;
        /**
          * Whether the list item can be dragged
          * @default false
         */
        "dragEnabled": boolean;
        /**
          * Number of items to show in the list - a scrollbar appears for overflow
          * @optional
         */
        "maxItems"?: number;
        /**
          * Size of the list and its items
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Selection mode of the list and its items
          * @default 'single'
         */
        "selectionMode": SelectionMode;
    }
    interface DashListItem {
        /**
          * Whether the list item can be deselected
          * @default false
         */
        "disableDeselect": boolean;
        /**
          * When `true`, interaction is disabled
         */
        "disabled": boolean;
        /**
          * Whether the list item can be dragged
          * @default false
         */
        "dragEnabled": boolean;
        /**
          * When `true`, list-item is being dragged. Used for styling purposes
         */
        "isDragging": boolean;
        /**
          * Size of the list-item
          * @default 'm'
         */
        "scale": Scale;
        /**
          * When `true`, list-item is selected
          * @default false
         */
        "selected": boolean;
        /**
          * Selection mode of the list item
          * @default 'single'
         */
        "selectionMode": SelectionMode1;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
    }
    interface DashLoader {
        /**
          * Size of the loader
          * @default 'm'
         */
        "scale": Scale;
    }
    interface DashModal {
        /**
          * When `true`, sets focus on the close button if it's available
          * @default false
         */
        "autoFocus": boolean;
        /**
          * Closes the modal
         */
        "close": () => Promise<void>;
        /**
          * When `true`, the modal will not automatically go into fullscreen mode when the screen size is mobile.
          * @default false
         */
        "disableFullscreenMobileView": boolean;
        /**
          * When `true`, modal is in fullscreen mode
          * @default false
         */
        "fullscreen": boolean;
        /**
          * Modal heading
          * @optional
         */
        "heading"?: string;
        /**
          * When `true`, the close button is not displayed
          * @default false
         */
        "hideCloseButton": boolean;
        /**
          * When `true`, the modal is open
          * @default false
         */
        "open": boolean;
        /**
          * Size of the modal
          * @default 'm'
         */
        "scale": Scale;
    }
    interface DashPopover {
        /**
          * When true, the popover will be open
          * @default false
         */
        "active": boolean;
        /**
          * When `true`, popover will autoclose when it loses focus
          * @default false
         */
        "autoClose": boolean;
        /**
          * Offset the popover in the x direction in pixels
          * @optional
         */
        "offsetX"?: number;
        /**
          * Offset the popover in the y direction in pixels
          * @optional
         */
        "offsetY"?: number;
        /**
          * Position of the popover relative to its target
          * @default 'bottom'
         */
        "placement": Placement1;
        /**
          * Strategy of placing the popover
          * @default 'absolute'
         */
        "placementStrategy": PlacementStrategy1;
        /**
          * Popover target reference, can either be an element or element id
          * @required
         */
        "target": HTMLElement | string;
    }
    interface DashScrim {
        /**
          * When `true`, the scrim is visible
          * @default false
         */
        "active": boolean;
    }
    interface DashSection {
        /**
          * Section heading
          * @required
         */
        "heading": string;
        /**
          * When `true`, header sticks to the top
          * @default false
         */
        "stickyHeader": boolean;
    }
    interface DashShell {
    }
    interface DashSideBar {
        /**
          * When `true`, the sidebar is collapsed
          * @default false
         */
        "collapsed": boolean;
    }
    interface DashSidebarButton {
        /**
          * When `true`, the button is visibly active
          * @default false
         */
        "active": boolean;
        /**
          * When `true`, the button is in collapsed mode
          * @default false
         */
        "collapsed": boolean;
        /**
          * Icon displayed at the start of the button
          * @required
         */
        "icon": string;
        /**
          * Sets the color of the icon
          * @optional
         */
        "iconColor": string;
        /**
          * Button text to display
          * @required
         */
        "text": string;
    }
    interface DashTextarea {
        /**
          * text-area cols
          * @optional
         */
        "cols": number;
        /**
          * Placeholder text when there is no current value
          * @optional
         */
        "placeholder": string;
        /**
          * When `true`, disables updating the text-area value
          * @default false
         */
        "readonly": boolean;
        /**
          * When `true`, a value is required for forms
          * @default false
         */
        "required": boolean;
        /**
          * Determines how the text area can be resized, if at all
         */
        "resize": Resize;
        /**
          * text-area rows
          * @optional
         */
        "rows"?: number;
        /**
          * Text of the text-area
          * @optional
         */
        "value": string;
    }
    interface DashThemeToggle {
        /**
          * Current theme
          * @required 
          * @default 'light'
         */
        "theme": Theme;
    }
    interface DashToggleSwitch {
        /**
          * When `true`, toggle is checked
          * @optional 
          * @default false
         */
        "checked": boolean;
        /**
          * Sets focus on this element
         */
        "setFocus": () => Promise<void>;
    }
    interface DashTooltip {
        /**
          * When `true`, an arrow is displayed on the tooltip
          * @default false
         */
        "arrow": boolean;
        /**
          * When `true`, tooltip is visible
          * @default false
         */
        "enabled": boolean;
        /**
          * Offset the tooltip in the x direction in pixels
          * @optional
         */
        "offsetX"?: number;
        /**
          * Offset the tooltip in the y direction in pixels
          * @optional
         */
        "offsetY"?: number;
        /**
          * Position of the tooltip relative to its target
          * @default 'bottom'
         */
        "placement": Placement;
        /**
          * Strategy the tooltip is placed
          * @default 'absolute'
         */
        "placementStrategy": PlacementStrategy;
        /**
          * Size of the tooltip
          * @default 'm'
         */
        "scale": Scale;
        /**
          * Target reference element where the tooltip will be positioned next to
          * @required
         */
        "target": HTMLElement | string;
        /**
          * Text value to be displayed in tooltip
          * @required
         */
        "text": string;
    }
}
export interface DashChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashChipElement;
}
export interface DashColorHuePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashColorHuePickerElement;
}
export interface DashColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashColorPickerElement;
}
export interface DashConfirmButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashConfirmButtonElement;
}
export interface DashDrillMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashDrillMenuElement;
}
export interface DashDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashDropdownElement;
}
export interface DashFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashFilterElement;
}
export interface DashInlineEditCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashInlineEditElement;
}
export interface DashInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashInputElement;
}
export interface DashListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashListItemElement;
}
export interface DashModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashModalElement;
}
export interface DashPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashPopoverElement;
}
export interface DashSideBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashSideBarElement;
}
export interface DashTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashTextareaElement;
}
export interface DashThemeToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashThemeToggleElement;
}
export interface DashToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDashToggleSwitchElement;
}
declare global {
    interface HTMLDashButtonElement extends Components.DashButton, HTMLStencilElement {
    }
    var HTMLDashButtonElement: {
        prototype: HTMLDashButtonElement;
        new (): HTMLDashButtonElement;
    };
    interface HTMLDashChipElement extends Components.DashChip, HTMLStencilElement {
    }
    var HTMLDashChipElement: {
        prototype: HTMLDashChipElement;
        new (): HTMLDashChipElement;
    };
    interface HTMLDashColorHuePickerElement extends Components.DashColorHuePicker, HTMLStencilElement {
    }
    var HTMLDashColorHuePickerElement: {
        prototype: HTMLDashColorHuePickerElement;
        new (): HTMLDashColorHuePickerElement;
    };
    interface HTMLDashColorPickerElement extends Components.DashColorPicker, HTMLStencilElement {
    }
    var HTMLDashColorPickerElement: {
        prototype: HTMLDashColorPickerElement;
        new (): HTMLDashColorPickerElement;
    };
    interface HTMLDashColorSwatchElement extends Components.DashColorSwatch, HTMLStencilElement {
    }
    var HTMLDashColorSwatchElement: {
        prototype: HTMLDashColorSwatchElement;
        new (): HTMLDashColorSwatchElement;
    };
    interface HTMLDashConfirmButtonElement extends Components.DashConfirmButton, HTMLStencilElement {
    }
    var HTMLDashConfirmButtonElement: {
        prototype: HTMLDashConfirmButtonElement;
        new (): HTMLDashConfirmButtonElement;
    };
    interface HTMLDashDrillMenuElement extends Components.DashDrillMenu, HTMLStencilElement {
    }
    var HTMLDashDrillMenuElement: {
        prototype: HTMLDashDrillMenuElement;
        new (): HTMLDashDrillMenuElement;
    };
    interface HTMLDashDropdownElement extends Components.DashDropdown, HTMLStencilElement {
    }
    var HTMLDashDropdownElement: {
        prototype: HTMLDashDropdownElement;
        new (): HTMLDashDropdownElement;
    };
    interface HTMLDashFabElement extends Components.DashFab, HTMLStencilElement {
    }
    var HTMLDashFabElement: {
        prototype: HTMLDashFabElement;
        new (): HTMLDashFabElement;
    };
    interface HTMLDashFilterElement extends Components.DashFilter, HTMLStencilElement {
    }
    var HTMLDashFilterElement: {
        prototype: HTMLDashFilterElement;
        new (): HTMLDashFilterElement;
    };
    interface HTMLDashFocusTrapElement extends Components.DashFocusTrap, HTMLStencilElement {
    }
    var HTMLDashFocusTrapElement: {
        prototype: HTMLDashFocusTrapElement;
        new (): HTMLDashFocusTrapElement;
    };
    interface HTMLDashGridElement extends Components.DashGrid, HTMLStencilElement {
    }
    var HTMLDashGridElement: {
        prototype: HTMLDashGridElement;
        new (): HTMLDashGridElement;
    };
    interface HTMLDashIconElement extends Components.DashIcon, HTMLStencilElement {
    }
    var HTMLDashIconElement: {
        prototype: HTMLDashIconElement;
        new (): HTMLDashIconElement;
    };
    interface HTMLDashIconButtonElement extends Components.DashIconButton, HTMLStencilElement {
    }
    var HTMLDashIconButtonElement: {
        prototype: HTMLDashIconButtonElement;
        new (): HTMLDashIconButtonElement;
    };
    interface HTMLDashInlineEditElement extends Components.DashInlineEdit, HTMLStencilElement {
    }
    var HTMLDashInlineEditElement: {
        prototype: HTMLDashInlineEditElement;
        new (): HTMLDashInlineEditElement;
    };
    interface HTMLDashInputElement extends Components.DashInput, HTMLStencilElement {
    }
    var HTMLDashInputElement: {
        prototype: HTMLDashInputElement;
        new (): HTMLDashInputElement;
    };
    interface HTMLDashLabelElement extends Components.DashLabel, HTMLStencilElement {
    }
    var HTMLDashLabelElement: {
        prototype: HTMLDashLabelElement;
        new (): HTMLDashLabelElement;
    };
    interface HTMLDashListElement extends Components.DashList, HTMLStencilElement {
    }
    var HTMLDashListElement: {
        prototype: HTMLDashListElement;
        new (): HTMLDashListElement;
    };
    interface HTMLDashListItemElement extends Components.DashListItem, HTMLStencilElement {
    }
    var HTMLDashListItemElement: {
        prototype: HTMLDashListItemElement;
        new (): HTMLDashListItemElement;
    };
    interface HTMLDashLoaderElement extends Components.DashLoader, HTMLStencilElement {
    }
    var HTMLDashLoaderElement: {
        prototype: HTMLDashLoaderElement;
        new (): HTMLDashLoaderElement;
    };
    interface HTMLDashModalElement extends Components.DashModal, HTMLStencilElement {
    }
    var HTMLDashModalElement: {
        prototype: HTMLDashModalElement;
        new (): HTMLDashModalElement;
    };
    interface HTMLDashPopoverElement extends Components.DashPopover, HTMLStencilElement {
    }
    var HTMLDashPopoverElement: {
        prototype: HTMLDashPopoverElement;
        new (): HTMLDashPopoverElement;
    };
    interface HTMLDashScrimElement extends Components.DashScrim, HTMLStencilElement {
    }
    var HTMLDashScrimElement: {
        prototype: HTMLDashScrimElement;
        new (): HTMLDashScrimElement;
    };
    interface HTMLDashSectionElement extends Components.DashSection, HTMLStencilElement {
    }
    var HTMLDashSectionElement: {
        prototype: HTMLDashSectionElement;
        new (): HTMLDashSectionElement;
    };
    interface HTMLDashShellElement extends Components.DashShell, HTMLStencilElement {
    }
    var HTMLDashShellElement: {
        prototype: HTMLDashShellElement;
        new (): HTMLDashShellElement;
    };
    interface HTMLDashSideBarElement extends Components.DashSideBar, HTMLStencilElement {
    }
    var HTMLDashSideBarElement: {
        prototype: HTMLDashSideBarElement;
        new (): HTMLDashSideBarElement;
    };
    interface HTMLDashSidebarButtonElement extends Components.DashSidebarButton, HTMLStencilElement {
    }
    var HTMLDashSidebarButtonElement: {
        prototype: HTMLDashSidebarButtonElement;
        new (): HTMLDashSidebarButtonElement;
    };
    interface HTMLDashTextareaElement extends Components.DashTextarea, HTMLStencilElement {
    }
    var HTMLDashTextareaElement: {
        prototype: HTMLDashTextareaElement;
        new (): HTMLDashTextareaElement;
    };
    interface HTMLDashThemeToggleElement extends Components.DashThemeToggle, HTMLStencilElement {
    }
    var HTMLDashThemeToggleElement: {
        prototype: HTMLDashThemeToggleElement;
        new (): HTMLDashThemeToggleElement;
    };
    interface HTMLDashToggleSwitchElement extends Components.DashToggleSwitch, HTMLStencilElement {
    }
    var HTMLDashToggleSwitchElement: {
        prototype: HTMLDashToggleSwitchElement;
        new (): HTMLDashToggleSwitchElement;
    };
    interface HTMLDashTooltipElement extends Components.DashTooltip, HTMLStencilElement {
    }
    var HTMLDashTooltipElement: {
        prototype: HTMLDashTooltipElement;
        new (): HTMLDashTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "dash-button": HTMLDashButtonElement;
        "dash-chip": HTMLDashChipElement;
        "dash-color-hue-picker": HTMLDashColorHuePickerElement;
        "dash-color-picker": HTMLDashColorPickerElement;
        "dash-color-swatch": HTMLDashColorSwatchElement;
        "dash-confirm-button": HTMLDashConfirmButtonElement;
        "dash-drill-menu": HTMLDashDrillMenuElement;
        "dash-dropdown": HTMLDashDropdownElement;
        "dash-fab": HTMLDashFabElement;
        "dash-filter": HTMLDashFilterElement;
        "dash-focus-trap": HTMLDashFocusTrapElement;
        "dash-grid": HTMLDashGridElement;
        "dash-icon": HTMLDashIconElement;
        "dash-icon-button": HTMLDashIconButtonElement;
        "dash-inline-edit": HTMLDashInlineEditElement;
        "dash-input": HTMLDashInputElement;
        "dash-label": HTMLDashLabelElement;
        "dash-list": HTMLDashListElement;
        "dash-list-item": HTMLDashListItemElement;
        "dash-loader": HTMLDashLoaderElement;
        "dash-modal": HTMLDashModalElement;
        "dash-popover": HTMLDashPopoverElement;
        "dash-scrim": HTMLDashScrimElement;
        "dash-section": HTMLDashSectionElement;
        "dash-shell": HTMLDashShellElement;
        "dash-side-bar": HTMLDashSideBarElement;
        "dash-sidebar-button": HTMLDashSidebarButtonElement;
        "dash-textarea": HTMLDashTextareaElement;
        "dash-theme-toggle": HTMLDashThemeToggleElement;
        "dash-toggle-switch": HTMLDashToggleSwitchElement;
        "dash-tooltip": HTMLDashTooltipElement;
    }
}
declare namespace LocalJSX {
    interface DashButton {
        /**
          * Visible appearance of the button
          * @default 'clear'
         */
        "appearance"?: Appearance;
        /**
          * When `true`, disables interaction
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Size of button
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * Icon displayed at the start of the button
          * @optional
         */
        "startIcon"?: string;
        /**
          * Status of the button shown with various styles
          * @optional
         */
        "status"?: Status;
    }
    interface DashChip {
        /**
          * Background color of the chip
          * @required
         */
        "color"?: string;
        /**
          * Text to display when user focuses or hovers over dismiss button
          * @optional
         */
        "dismissTooltipText"?: string;
        /**
          * When `true`, chip can be removed
          * @default false
         */
        "dismissible"?: boolean;
        /**
          * Displayed heading on the chip
          * @required
         */
        "heading"?: string;
        /**
          * Emitted when the chip is removed
         */
        "onDashChipDismiss"?: (event: DashChipCustomEvent<void>) => void;
        /**
          * When `true`, the chip can be interacted with
          * @default false
         */
        "selectable"?: boolean;
    }
    interface DashColorHuePicker {
        /**
          * Hue value from [0, 360]
          * @default 0
         */
        "hue"?: number;
        /**
          * Emitted when hue has been changed
         */
        "onDashColorHuePickerHueChanged"?: (event: DashColorHuePickerCustomEvent<void>) => void;
        /**
          * Width of hue picker (in pixels)
          * @default 200
         */
        "width"?: number;
    }
    interface DashColorPicker {
        /**
          * Color as hex value
         */
        "color"?: string;
        /**
          * Default colors
         */
        "defaultColors"?: string[];
        /**
          * Emitted when color has been selected
         */
        "onDashColorPickerColorChanged"?: (event: DashColorPickerCustomEvent<void>) => void;
    }
    interface DashColorSwatch {
        /**
          * Color of the swatch
          * @required
         */
        "color"?: string;
        /**
          * Size of swatch
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * When `true`, the swatch is selected and provides visual feedback
          * @default false
         */
        "selected"?: boolean;
    }
    interface DashConfirmButton {
        /**
          * Icon used in button that triggers confirm state
          * @required
         */
        "icon"?: string;
        /**
          * Emitted when user confirms
         */
        "onDashConfirmButtonConfirmed"?: (event: DashConfirmButtonCustomEvent<any>) => void;
        /**
          * Size of the confirm button
         */
        "scale"?: Scale;
    }
    interface DashDrillMenu {
        /**
          * When `true`, drill menu is activated
          * @default false
         */
        "active"?: boolean;
        /**
          * Heading for the drill menu
          * @optional
         */
        "drillHeading"?: string;
        /**
          * Emitted when drill menu is closed
         */
        "onDashDrillMenuClosed"?: (event: DashDrillMenuCustomEvent<any>) => void;
    }
    interface DashDropdown {
        /**
          * When `true`, dropdown will close when focus is lost
          * @default false
         */
        "autoClose"?: boolean;
        /**
          * Emitted when dropdown is either opened or closed
         */
        "onDashDropdownOpenChange"?: (event: DashDropdownCustomEvent<void>) => void;
        /**
          * When `true`, dropdown is open
          * @default false
         */
        "open"?: boolean;
        /**
          * Placement of the dropdown relative to its target
          * @default 'bottom'
         */
        "placement"?: Placement;
        /**
          * Placement strategy for dropdown
          * @default 'absolute'
         */
        "placementStrategy"?: PlacementStrategy;
    }
    interface DashFab {
        /**
          * Icon to display
          * @required
         */
        "icon"?: string;
        /**
          * Size of the fab
          * @default 'm'
         */
        "scale"?: ScaleExtended;
    }
    interface DashFilter {
        /**
          * Debounces input in milliseconds
          * @default 250
         */
        "debounce"?: number;
        /**
          * Value to filter items by
          * @optional
         */
        "filterValue"?: string;
        /**
          * Items to filter
          * @required
         */
        "items"?: {}[] | string[];
        /**
          * Key to filter items by. Supports up two two levels of nesting. For example, 'state.title' is valid
          * @optional
         */
        "objKey"?: string;
        /**
          * Emitted when filtered items change
         */
        "onDashFilterFilteredItems"?: (event: DashFilterCustomEvent<object[]>) => void;
        /**
          * Emitted when user submits filter input
         */
        "onDashFilterSubmit"?: (event: DashFilterCustomEvent<void>) => void;
        /**
          * Emitted when filtered value changes
         */
        "onDashFilterValueChanged"?: (event: DashFilterCustomEvent<void>) => void;
        /**
          * Placeholder text for input
          * @default 'Filter''
         */
        "placeholder"?: string;
        /**
          * Size of the filter input
          * @default 'm'
         */
        "scale"?: Scale;
    }
    interface DashFocusTrap {
    }
    interface DashGrid {
        /**
          * Number of columns when the screen size is large
          * @required
         */
        "colL"?: number;
        /**
          * Number of columns when the screen size is medium
          * @required
         */
        "colM"?: number;
        /**
          * Number of columns when the screen size is small
          * @required
         */
        "colS"?: number;
        /**
          * Number of columns when the screen size is extra large
          * @required
         */
        "colXl"?: number;
    }
    interface DashIcon {
        /**
          * Color of the icon
          * @default 'neutral'
         */
        "color"?: IconColor;
        /**
          * Icon name to display
          * @optional
         */
        "icon"?: string;
        /**
          * URL pointing to icon
          * @optional
         */
        "iconUrl"?: string;
        /**
          * When `true`, icon is rounded
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Size of the icon
          * @default 'm'
         */
        "scale"?: ScaleExtended;
        /**
          * Width of the icon in pixels
          * @optional
         */
        "width"?: number;
    }
    interface DashIconButton {
        /**
          * When `true`, the icon button cannot be interacted with
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Icon to display
          * @optional
         */
        "icon"?: string;
        /**
          * Icon to display from URL
          * @optional
         */
        "iconUrl"?: string;
        /**
          * When `true`, indicates the button is loading and cannot be interacted with
          * @default false
         */
        "loading"?: boolean;
        /**
          * When `true`, the icon button will be round
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Size of the icon button
          * @default 'm'
         */
        "scale"?: ScaleExtended;
        /**
          * Indicates where the tooltip should be placed relative to the icon button
          * @optional
         */
        "tooltipPlacement"?: Placement;
        /**
          * When provided, a tooltip will display when interacted with
          * @optional
         */
        "tooltipText"?: string;
        /**
          * HTML button type https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type
          * @optional
         */
        "type"?: string;
    }
    interface DashInlineEdit {
        /**
          * When `true`, disabled interaction
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Emitted when the value has been changed and confirmed
         */
        "onDashInlineEditValueChanged"?: (event: DashInlineEditCustomEvent<void>) => void;
        /**
          * Size of the inline edit
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * Value to be used for editing
          * @required
         */
        "value"?: string;
    }
    interface DashInput {
        /**
          * When `true`, a clear button will be displayed at the end of the input
          * @default false
         */
        "clearable"?: boolean;
        /**
          * Debounces input changes in milliseconds Note: debounce is only initialized on component load. Modifying debounce after initialization will not do anything.
          * @optional
         */
        "debounce"?: number;
        /**
          * Icon displayed at the end of the input
          * @optional
         */
        "icon"?: string;
        /**
          * Emitted when input changes
         */
        "onDashInputInput"?: (event: DashInputCustomEvent<void>) => void;
        /**
          * Emitted only when input is submitted
         */
        "onDashInputSubmit"?: (event: DashInputCustomEvent<void>) => void;
        /**
          * Placeholder text for input
          * @optional
         */
        "placeholder"?: string;
        /**
          * Size of the input
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * Input type
          * @optional
         */
        "type"?: string;
        /**
          * Value of input
          * @optional
         */
        "value"?: string;
    }
    interface DashLabel {
        /**
          * Label for id https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#attr-for
          * @optional
         */
        "for"?: string;
        /**
          * Determines how the label and content is laid out
          * @default 'default'
         */
        "layout"?: LabelLayout;
    }
    interface DashList {
        /**
          * Whether the list items can be deselected
          * @default false
         */
        "disableDeselect"?: boolean;
        /**
          * Whether the list item can be dragged
          * @default false
         */
        "dragEnabled"?: boolean;
        /**
          * Number of items to show in the list - a scrollbar appears for overflow
          * @optional
         */
        "maxItems"?: number;
        /**
          * Size of the list and its items
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * Selection mode of the list and its items
          * @default 'single'
         */
        "selectionMode"?: SelectionMode;
    }
    interface DashListItem {
        /**
          * Whether the list item can be deselected
          * @default false
         */
        "disableDeselect"?: boolean;
        /**
          * When `true`, interaction is disabled
         */
        "disabled"?: boolean;
        /**
          * Whether the list item can be dragged
          * @default false
         */
        "dragEnabled"?: boolean;
        /**
          * When `true`, list-item is being dragged. Used for styling purposes
         */
        "isDragging"?: boolean;
        /**
          * Emitted when list-item indicates focus should be moved to the next list-item
         */
        "onDashInternalListItemMoveNext"?: (event: DashListItemCustomEvent<void>) => void;
        /**
          * Emitted when list-item indicates focus should be moved to the previous list-item
         */
        "onDashInternalListItemMovePrevious"?: (event: DashListItemCustomEvent<void>) => void;
        /**
          * Emitted when list-item is starting to be dragged
         */
        "onDashInternalListItemStartDrag"?: (event: DashListItemCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when selected has changed
         */
        "onDashListItemSelectedChanged"?: (event: DashListItemCustomEvent<void>) => void;
        /**
          * Size of the list-item
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * When `true`, list-item is selected
          * @default false
         */
        "selected"?: boolean;
        /**
          * Selection mode of the list item
          * @default 'single'
         */
        "selectionMode"?: SelectionMode1;
    }
    interface DashLoader {
        /**
          * Size of the loader
          * @default 'm'
         */
        "scale"?: Scale;
    }
    interface DashModal {
        /**
          * When `true`, sets focus on the close button if it's available
          * @default false
         */
        "autoFocus"?: boolean;
        /**
          * When `true`, the modal will not automatically go into fullscreen mode when the screen size is mobile.
          * @default false
         */
        "disableFullscreenMobileView"?: boolean;
        /**
          * When `true`, modal is in fullscreen mode
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * Modal heading
          * @optional
         */
        "heading"?: string;
        /**
          * When `true`, the close button is not displayed
          * @default false
         */
        "hideCloseButton"?: boolean;
        /**
          * Emitted when the modal is about to close (before the animation starts playing)
         */
        "onDashModalBeforeClose"?: (event: DashModalCustomEvent<any>) => void;
        /**
          * Emitted after the modal's close animation completes and the modal is actually closed
         */
        "onDashModalClosed"?: (event: DashModalCustomEvent<any>) => void;
        /**
          * When `true`, the modal is open
          * @default false
         */
        "open"?: boolean;
        /**
          * Size of the modal
          * @default 'm'
         */
        "scale"?: Scale;
    }
    interface DashPopover {
        /**
          * When true, the popover will be open
          * @default false
         */
        "active"?: boolean;
        /**
          * When `true`, popover will autoclose when it loses focus
          * @default false
         */
        "autoClose"?: boolean;
        /**
          * Offset the popover in the x direction in pixels
          * @optional
         */
        "offsetX"?: number;
        /**
          * Offset the popover in the y direction in pixels
          * @optional
         */
        "offsetY"?: number;
        /**
          * Emitted when the popover is closed
         */
        "onDashPopoverClose"?: (event: DashPopoverCustomEvent<PopoverCloseEvent>) => void;
        /**
          * Emitted when the popover is opened
         */
        "onDashPopoverOpen"?: (event: DashPopoverCustomEvent<any>) => void;
        /**
          * Position of the popover relative to its target
          * @default 'bottom'
         */
        "placement"?: Placement1;
        /**
          * Strategy of placing the popover
          * @default 'absolute'
         */
        "placementStrategy"?: PlacementStrategy1;
        /**
          * Popover target reference, can either be an element or element id
          * @required
         */
        "target"?: HTMLElement | string;
    }
    interface DashScrim {
        /**
          * When `true`, the scrim is visible
          * @default false
         */
        "active"?: boolean;
    }
    interface DashSection {
        /**
          * Section heading
          * @required
         */
        "heading"?: string;
        /**
          * When `true`, header sticks to the top
          * @default false
         */
        "stickyHeader"?: boolean;
    }
    interface DashShell {
    }
    interface DashSideBar {
        /**
          * When `true`, the sidebar is collapsed
          * @default false
         */
        "collapsed"?: boolean;
        /**
          * Emitted when the sidebar is closed
         */
        "onDashSideBarClose"?: (event: DashSideBarCustomEvent<any>) => void;
    }
    interface DashSidebarButton {
        /**
          * When `true`, the button is visibly active
          * @default false
         */
        "active"?: boolean;
        /**
          * When `true`, the button is in collapsed mode
          * @default false
         */
        "collapsed"?: boolean;
        /**
          * Icon displayed at the start of the button
          * @required
         */
        "icon"?: string;
        /**
          * Sets the color of the icon
          * @optional
         */
        "iconColor"?: string;
        /**
          * Button text to display
          * @required
         */
        "text"?: string;
    }
    interface DashTextarea {
        /**
          * text-area cols
          * @optional
         */
        "cols"?: number;
        /**
          * Emitted when text area value changes
         */
        "onDashTextareaInput"?: (event: DashTextareaCustomEvent<any>) => void;
        /**
          * Placeholder text when there is no current value
          * @optional
         */
        "placeholder"?: string;
        /**
          * When `true`, disables updating the text-area value
          * @default false
         */
        "readonly"?: boolean;
        /**
          * When `true`, a value is required for forms
          * @default false
         */
        "required"?: boolean;
        /**
          * Determines how the text area can be resized, if at all
         */
        "resize"?: Resize;
        /**
          * text-area rows
          * @optional
         */
        "rows"?: number;
        /**
          * Text of the text-area
          * @optional
         */
        "value"?: string;
    }
    interface DashThemeToggle {
        /**
          * Emitted when the theme changed
         */
        "onDashThemeToggleChange"?: (event: DashThemeToggleCustomEvent<void>) => void;
        /**
          * Current theme
          * @required 
          * @default 'light'
         */
        "theme"?: Theme;
    }
    interface DashToggleSwitch {
        /**
          * When `true`, toggle is checked
          * @optional 
          * @default false
         */
        "checked"?: boolean;
        /**
          * Emitted when checked value has changed
         */
        "onDashToggleSwitchCheckChanged"?: (event: DashToggleSwitchCustomEvent<any>) => void;
    }
    interface DashTooltip {
        /**
          * When `true`, an arrow is displayed on the tooltip
          * @default false
         */
        "arrow"?: boolean;
        /**
          * When `true`, tooltip is visible
          * @default false
         */
        "enabled"?: boolean;
        /**
          * Offset the tooltip in the x direction in pixels
          * @optional
         */
        "offsetX"?: number;
        /**
          * Offset the tooltip in the y direction in pixels
          * @optional
         */
        "offsetY"?: number;
        /**
          * Position of the tooltip relative to its target
          * @default 'bottom'
         */
        "placement"?: Placement;
        /**
          * Strategy the tooltip is placed
          * @default 'absolute'
         */
        "placementStrategy"?: PlacementStrategy;
        /**
          * Size of the tooltip
          * @default 'm'
         */
        "scale"?: Scale;
        /**
          * Target reference element where the tooltip will be positioned next to
          * @required
         */
        "target"?: HTMLElement | string;
        /**
          * Text value to be displayed in tooltip
          * @required
         */
        "text"?: string;
    }
    interface IntrinsicElements {
        "dash-button": DashButton;
        "dash-chip": DashChip;
        "dash-color-hue-picker": DashColorHuePicker;
        "dash-color-picker": DashColorPicker;
        "dash-color-swatch": DashColorSwatch;
        "dash-confirm-button": DashConfirmButton;
        "dash-drill-menu": DashDrillMenu;
        "dash-dropdown": DashDropdown;
        "dash-fab": DashFab;
        "dash-filter": DashFilter;
        "dash-focus-trap": DashFocusTrap;
        "dash-grid": DashGrid;
        "dash-icon": DashIcon;
        "dash-icon-button": DashIconButton;
        "dash-inline-edit": DashInlineEdit;
        "dash-input": DashInput;
        "dash-label": DashLabel;
        "dash-list": DashList;
        "dash-list-item": DashListItem;
        "dash-loader": DashLoader;
        "dash-modal": DashModal;
        "dash-popover": DashPopover;
        "dash-scrim": DashScrim;
        "dash-section": DashSection;
        "dash-shell": DashShell;
        "dash-side-bar": DashSideBar;
        "dash-sidebar-button": DashSidebarButton;
        "dash-textarea": DashTextarea;
        "dash-theme-toggle": DashThemeToggle;
        "dash-toggle-switch": DashToggleSwitch;
        "dash-tooltip": DashTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dash-button": LocalJSX.DashButton & JSXBase.HTMLAttributes<HTMLDashButtonElement>;
            "dash-chip": LocalJSX.DashChip & JSXBase.HTMLAttributes<HTMLDashChipElement>;
            "dash-color-hue-picker": LocalJSX.DashColorHuePicker & JSXBase.HTMLAttributes<HTMLDashColorHuePickerElement>;
            "dash-color-picker": LocalJSX.DashColorPicker & JSXBase.HTMLAttributes<HTMLDashColorPickerElement>;
            "dash-color-swatch": LocalJSX.DashColorSwatch & JSXBase.HTMLAttributes<HTMLDashColorSwatchElement>;
            "dash-confirm-button": LocalJSX.DashConfirmButton & JSXBase.HTMLAttributes<HTMLDashConfirmButtonElement>;
            "dash-drill-menu": LocalJSX.DashDrillMenu & JSXBase.HTMLAttributes<HTMLDashDrillMenuElement>;
            "dash-dropdown": LocalJSX.DashDropdown & JSXBase.HTMLAttributes<HTMLDashDropdownElement>;
            "dash-fab": LocalJSX.DashFab & JSXBase.HTMLAttributes<HTMLDashFabElement>;
            "dash-filter": LocalJSX.DashFilter & JSXBase.HTMLAttributes<HTMLDashFilterElement>;
            "dash-focus-trap": LocalJSX.DashFocusTrap & JSXBase.HTMLAttributes<HTMLDashFocusTrapElement>;
            "dash-grid": LocalJSX.DashGrid & JSXBase.HTMLAttributes<HTMLDashGridElement>;
            "dash-icon": LocalJSX.DashIcon & JSXBase.HTMLAttributes<HTMLDashIconElement>;
            "dash-icon-button": LocalJSX.DashIconButton & JSXBase.HTMLAttributes<HTMLDashIconButtonElement>;
            "dash-inline-edit": LocalJSX.DashInlineEdit & JSXBase.HTMLAttributes<HTMLDashInlineEditElement>;
            "dash-input": LocalJSX.DashInput & JSXBase.HTMLAttributes<HTMLDashInputElement>;
            "dash-label": LocalJSX.DashLabel & JSXBase.HTMLAttributes<HTMLDashLabelElement>;
            "dash-list": LocalJSX.DashList & JSXBase.HTMLAttributes<HTMLDashListElement>;
            "dash-list-item": LocalJSX.DashListItem & JSXBase.HTMLAttributes<HTMLDashListItemElement>;
            "dash-loader": LocalJSX.DashLoader & JSXBase.HTMLAttributes<HTMLDashLoaderElement>;
            "dash-modal": LocalJSX.DashModal & JSXBase.HTMLAttributes<HTMLDashModalElement>;
            "dash-popover": LocalJSX.DashPopover & JSXBase.HTMLAttributes<HTMLDashPopoverElement>;
            "dash-scrim": LocalJSX.DashScrim & JSXBase.HTMLAttributes<HTMLDashScrimElement>;
            "dash-section": LocalJSX.DashSection & JSXBase.HTMLAttributes<HTMLDashSectionElement>;
            "dash-shell": LocalJSX.DashShell & JSXBase.HTMLAttributes<HTMLDashShellElement>;
            "dash-side-bar": LocalJSX.DashSideBar & JSXBase.HTMLAttributes<HTMLDashSideBarElement>;
            "dash-sidebar-button": LocalJSX.DashSidebarButton & JSXBase.HTMLAttributes<HTMLDashSidebarButtonElement>;
            "dash-textarea": LocalJSX.DashTextarea & JSXBase.HTMLAttributes<HTMLDashTextareaElement>;
            "dash-theme-toggle": LocalJSX.DashThemeToggle & JSXBase.HTMLAttributes<HTMLDashThemeToggleElement>;
            "dash-toggle-switch": LocalJSX.DashToggleSwitch & JSXBase.HTMLAttributes<HTMLDashToggleSwitchElement>;
            "dash-tooltip": LocalJSX.DashTooltip & JSXBase.HTMLAttributes<HTMLDashTooltipElement>;
        }
    }
}
